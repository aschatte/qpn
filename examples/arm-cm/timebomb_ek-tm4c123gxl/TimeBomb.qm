<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="1">
 <!--${qpn}-->
 <framework name="qpn"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::TimeBomb}-->
  <class name="TimeBomb" superclass="qpn::QActive">
   <!--${AOs::TimeBomb::te}-->
   <attribute name="te" type="QTimer" visibility="0x00" properties="0x00"/>
   <!--${AOs::TimeBomb::blink_ctr}-->
   <attribute name="blink_ctr" type="uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::TimeBomb::ctor}-->
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;TimeBomb_initial);
//QTimeEvt_ctorX(&amp;me-&gt;te, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
   </operation>
   <!--${AOs::TimeBomb::SM}-->
   <statechart properties="0x01">
    <!--${AOs::TimeBomb::SM::initial}-->
    <initial target="../1/2">
     <initial_glyph conn="8,4,5,1,34,16,-2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::TimeBomb::SM::armed}-->
    <state name="armed">
     <exit brief="all-LEDs=OFF;">BSP_ledRedOff();
BSP_ledGreenOff();
BSP_ledBlueOff();</exit>
     <!--${AOs::TimeBomb::SM::armed::initial}-->
     <initial target="../2">
      <initial_glyph conn="46,16,4,1,6,-6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::TimeBomb::SM::armed::BUTTON2_PRESSED}-->
     <tran trig="BUTTON2_PRESSED" target="../../2">
      <tran_glyph conn="53,29,1,2,15,-8">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::TimeBomb::SM::armed::wait4button}-->
     <state name="wait4button">
      <entry brief="GreenLED=ON">BSP_ledGreenOn();</entry>
      <exit brief="GreenLED=OFF">BSP_ledGreenOff();</exit>
      <!--${AOs::TimeBomb::SM::armed::wait4button::BUTTON_PRESSED}-->
      <tran trig="BUTTON_PRESSED" target="../../3">
       <action brief="blink_ctr=5;">me-&gt;blink_ctr = 5U;</action>
       <tran_glyph conn="8,26,3,1,34,12,-2">
        <action box="0,-2,16,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,16,32,14">
       <entry box="1,2,15,2"/>
       <exit box="1,4,15,2"/>
      </state_glyph>
     </state>
     <!--${AOs::TimeBomb::SM::armed::blink}-->
     <state name="blink">
      <entry brief="RedLED=ON;arm-TE-for-1/2sec;">BSP_ledRedOn();
// QTimeEvt_armX(&amp;me-&gt;te, BSP_TICKS_PER_SEC/2, 0U);
// QTimeEvt_armX(&amp;((me-&gt;super).tickCtr[0]), BSP_TICKS_PER_SEC/2, 0U);
QActive_armX(&amp;(me-&gt;super), 0U, BSP_TICKS_PER_SEC/2);</entry>
      <exit brief="RedLED=OFF;">BSP_ledRedOff();</exit>
      <!--${AOs::TimeBomb::SM::armed::blink::Q_TIMEOUT}-->
      <tran trig="Q_TIMEOUT" target="../../4">
       <tran_glyph conn="8,44,3,1,34,10,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,34,32,13">
       <entry box="1,2,27,2"/>
       <exit box="1,4,14,2"/>
      </state_glyph>
     </state>
     <!--${AOs::TimeBomb::SM::armed::pause}-->
     <state name="pause">
      <entry brief="arm TE for1/2sec;">// QTimeEvt_armX(&amp;me-&gt;te, BSP_TICKS_PER_SEC/2, 0U);
// QTimeEvt_armX(&amp;((me-&gt;super).tickCtr[0]), BSP_TICKS_PER_SEC/2, 0U);
QActive_armX(&amp;(me-&gt;super), 0U, BSP_TICKS_PER_SEC/2);</entry>
      <!--${AOs::TimeBomb::SM::armed::pause::Q_TIMEOUT}-->
      <tran trig="Q_TIMEOUT">
       <action brief="--blink_ctr;">--me-&gt;blink_ctr;</action>
       <!--${AOs::TimeBomb::SM::armed::pause::Q_TIMEOUT::[blink_ctr>0]}-->
       <choice target="../../../3">
        <guard brief="blink_ctr &gt; 0">me-&gt;blink_ctr &gt; 0U</guard>
        <choice_glyph conn="46,62,5,1,10,-22,-16">
         <action box="1,-2,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::TimeBomb::SM::armed::pause::Q_TIMEOUT::[else]}-->
       <choice target="../../../5">
        <guard brief="else"/>
        <choice_glyph conn="46,62,4,1,8,-6">
         <action box="0,4,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="8,58,3,-1,38,4">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,50,32,13">
       <entry box="1,2,16,2"/>
      </state_glyph>
     </state>
     <!--${AOs::TimeBomb::SM::armed::boom}-->
     <state name="boom">
      <entry brief="all-LEDs=ON;">BSP_ledRedOn();
BSP_ledGreenOn();
BSP_ledBlueOn();</entry>
      <state_glyph node="8,66,32,13">
       <entry box="1,2,13,2"/>
      </state_glyph>
     </state>
     <state_glyph node="6,8,47,74">
      <exit box="1,2,13,2"/>
     </state_glyph>
    </state>
    <!--${AOs::TimeBomb::SM::defuse}-->
    <state name="defuse">
     <entry brief="BlueLED=ON;">BSP_ledBlueOn();</entry>
     <exit brief="BlueLED=OFF;">BSP_ledBlueOff();</exit>
     <!--${AOs::TimeBomb::SM::defuse::BUTTON2_PRESSED}-->
     <tran trig="BUTTON2_PRESSED" target="../../1">
      <tran_glyph conn="72,21,2,1,13,-19">
       <action box="-17,11,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="60,8,19,13">
      <entry box="1,2,13,2"/>
      <exit box="1,4,14,2"/>
     </state_glyph>
    </state>
    <state_diagram size="80,84"/>
   </statechart>
  </class>
  <!--${AOs::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky *me = (Blinky *)AO_Blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::main.c}-->
  <file name="main.c">
   <text>/* TimeBomb/Button with QP/N framework */
#include &lt;stdbool.h&gt;    /* Boolean type.      WG14/N843 C99 Standard */
#include &quot;qpn_conf.h&quot;
#include &quot;Hsm.h&quot;
#include &quot;qf_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;qassert.h&quot;

#warning ----------------   Build Configuration   ----------------
#if   (Q_PARAM_SIZE == 0)
    #warning PARAM_SIZE=0:
#elif (Q_PARAM_SIZE == 2)
    #warning PARAM_SIZE=2:
#elif (Q_PARAM_SIZE == 4)
    #warning PARAM_SIZE=4:
#else
    #warning PARAM_SIZE=ERROR:
#endif  //  #if   (Q_PARAM_SIZE == 0)
#warning ----------------   Build Configuration   ----------------


/* Active objects... */
extern QActive *AO_TimeBomb;

Q_DEFINE_THIS_MODULE(&quot;main_Hsm&quot;) /* this module name for Q_ASSERT() */

#define USE_EVENT_QUEUE
//#define USE_TIMER1

/* The TimeBomb AO =======================================================*/
$declare${AOs::TimeBomb}

$define${AOs::TimeBomb}

/** 
    Development bifurcates here with one path developing the Hsm toward the 
    Microchip midrange products and another developing the Hsm toward the QPN
    framework denoted by the BOard Support Package (BSP) being used.  EK-TM4C123GXL
    is used for Hsm-&gt;QPN development, and DM164130-9 is used for Microchip development.
*/
#if (defined EK_TM4C123GXL)

static QEvt timeBomb_queue[10];
static TimeBomb timeBomb;
QActive *AO_TimeBomb = &amp;timeBomb.super;

/* QF_active[] array defines all active object control blocks ----*/
QActiveCB const Q_ROM Q_ROM_VAR QF_active[] = {
    { (QActive *)0              , (QEvt *)0             , 0                     },
    { (QActive *)&amp;timeBomb.super, (QEvt *)timeBomb_queue, Q_DIM(timeBomb_queue) },
};

/* make sure that the QF_active[] array matches QF_MAX_ACTIVE in qpn_port.h */
Q_ASSERT_COMPILE(1U == Q_DIM(QF_active) - 1U);

/* the main function =========================================================*/
int main() {

    BSP_init(); /* initialize the BSP */
    QF_init(Q_DIM(QF_active));   /* initialize QP/C */

    /* create AO and start it */
    TimeBomb_ctor(&amp;timeBomb);

    QF_run(); /* run QP/C... */
    return 0; /* NOTE: the scheduler does NOT return */
}

#elif (defined DM164130_9)

//       Usage of Event queues implemented as circular buffer for event pointers.
//    (void)QEQueue_init(&amp;DispatchQueue, QEvt const *qSto[], QEQueueCtr const qLen);
//    (void)QEQueue_postFIFO(&amp;DispatchQueue, DOEvent)
//    (void)QEQueue_postLIFO(&amp;DispatchQueue, &amp;TimeoutEvent);
//    QEvt const * Event = QEQueue_get(&amp;DispatchQueue);

#include &quot;qequeue.h&quot;
QEQueue DispatchQueue;
QEQueueCtr const DispatchQueueLen = 10;
Q_ASSERT_COMPILE(DispatchQueueLen);
QEvt *DispatchQueueSto[DispatchQueueLen];

QEvt const *e;

HsmEvent        TimeoutEvent;

int main(void)
{
    //  Initialize the board level stuff.  This is done primarily at the ctor level.
    BSP_init();

    //  Set up the UART for 9600 baud, 8 data bits.
//    UART_SetUp();
//    UART_Start();

    (void)QEQueue_init(&amp;DispatchQueue, &amp;DispatchQueueSto[0], DispatchQueueLen);

    //  Initialize the Hsms.
    (void)TimeBomb_ctor(AO_TimeBomb);
    Hsm_init(AO_TimeBomb, (HsmEvent *)0);


//#ifdef USE_TIMER1
//    BSP_Timer1Init(MS_PER_TICK);    //  Set up Timer1 for 20ms tick rate
//    BSP_Timer1Start();
//#endif //   #ifdef USE_TIMER1

//    BSP_EnableInterrupts();

    //  Start the test.
#ifdef USE_PRINTF
    (void)printf(&quot;Start of program.\n&quot;);
#endif  //  #ifdef USE_PRINTF
    //  Initialize the Hsms.
    /** This is the background loop:  */
    while (1)
    {
        //  1.  Get the next event for the AO.
        e = QEQueue_get(&amp;DispatchQueue);
//        Q_ASSERT(e != (QEvt const *)0);     //  Assert that the event is 'real'.
        if (e != (QEvt const *)0) {
            //  2.  Dispatch the event to the AO.
            Hsm_dispatch((Hsm *)AO_TimeBomb, e);
            //  3.  Garbage collect the event.
            ((QEvt *)e)-&gt;sig = Q_EMPTY_SIG;
            e = (QEvt const *)0;
        }
    }

 //   UART_Stop();

    return 0;
}
#endif  //  #if (BSP == EK-TM4C123GXL)

</text>
  </file>
 </directory>
</model>
