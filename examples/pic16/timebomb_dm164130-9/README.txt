About this Example
==================
This directory contains the simple "Timebomb" QP-[micro] example application for
the Microchip DM164130-9 board. This directory contains portable code that should compile with any C compiler.

The sub-directories contain the Board Support Packages (BSPs) for the
cooperative QV kernel (sub-directory qv).

The native kernel (QV-[micro]) further provide code and project
files for the particular PIC toolchains, such as xc8, c90 & c99.

Please refer to the README files in the sub-directories for instructions
how to use and customize the example to your needs.


Support Code for DM164130-9 Board 
====================================
The directory qpm\examples\pic16\timebomb_dm164130-9 contains the bsp.<h,c> and otherfiles associated with this board. Please see the README.txt file in
this folder for more details.TimeBomb Application====================TimeBomb.qm - the TimeBomb QM model filemain_Hsm.c - the main and all application code developed from the model

About this Example==================This example demonstrates how to use the MPLAB-X IDE together withthe xc8 toolchain.*****NOTE: This example requires installing the following Software:MPLAB-X IDE: https://www.microchip.com/en-us/tools-resources/develop/mplab-x-ideXC8 Compiler: https://www.microchip.com/en-us/tools-resources/develop/mplab-xc-compilersPIC12-16F1xxx_DFP (1.2.63): This will be a part of the initial XC8 compiler installationQM Modeler format program: QM2HSM.exe.  This tools should be installed into the QModeler IDE:    Manage External Tools:        Title: QM to Hsm model converter        Command: C:\qp\qpm\qtools\bin\QM2HSM.exe (or equivalent)        Arguments: ${ModelFile}        Working Directory: .        Generate code before launching: checked*****QM Modeler==========QM Modeler is used normally to develop the Hsm state charts and Active Objects (AO)code including the use of the "me" objects to reference/modify the AO variables.However, in order to make the state chart amenable to the MPLAB-X, XC8 environmentthe state chart must follow the standard code generation with a set of editswhich are performed automatically by using the "QM to Hsm model converter" externaltool.  These steps are combined through using the "QM to Hsm model converter" buttonas set up above to perform code generation rather than the "Generate Code" button.the "Generate Code" button can still be used for non MPLAB-X compatable code generation.The tool should complete as follows:C:\qp\qpm\qtools\bin\QM2HSM.exe ${ModelFile}Processing QM Model file:#<path:C:\qp\qpm\examples\pic16\timebomb_dm164130-9\TimeBomb.qm>.	Processing model file path: #<path:C:\qp\qpm\examples\pic16\timebomb_dm164130-9\.\main_Hsm.c>cpu time: 15 real time: 18 gc time: 0}}} External tool finished normally with status 0in particular, with the "status 0" result.  If somrthing like the following occurs:C:\qp\qpm\qtools\bin\QM2HSM.exe ${ModelFile}C:\qp\qpm\qtools\bin\QM2HSM.exe ${ModelFile}copy-file: copy failed  source path: C:\qp\qpm\examples\pic16\timebomb_dm164130-9\.\main_Hsm.c  destination path: C:\qp\qpm\examples\pic16\timebomb_dm164130-9\.\main_Hsm.c.bak  system error: Access is denied.; win_err=5  context...:   .../bin/QM2HSM.rkt:68:0: QM2Hsm   .../bin/QM2HSM.rkt:116:0   body of 'QM2HSM   body of top-levelProcessing QM Model file:#<path:C:\qp\qpm\examples\pic16\timebomb_dm164130-9\TimeBomb.qm>.	Processing model file path: #<path:C:\qp\qpm\examples\pic16\timebomb_dm164130-9\.\main_Hsm.c>}}} External tool finished normally with status 1The main_Hsm.c and/or main_Hsm.c.bak might be locked as Read-Only.  Neither of these files should be Read-Only and this can be modified in the file Properties editor of the Windows File Explorer.  Please note that this tool isset up for the Windows OS.  The Racket source file QM2HSM.rkt is provided forcompilation for other enviromnments.MPLAB-X Project Folder======================The MPLAB-X project provided with this example usesrelative paths to the QP framework location (includes, port, andlibraries. These relative paths must be modified when the projectis moved to different relative location.Three build configurations are provided and can be selected in the Build Configuration box of the MPLAB-X toolbar:* Hsm - this is the basic Hsm port for the PIC16 (mid-range) architecture that uses "hard-wired" init, dispatch, post, and postISR functions.* QPN_NoVtables - this configuration implements the stock QPNarchitecture with provisions for the PIC16 pointer implementationin the xc8 compiler.  It also uses the QEPN implementations for init, dispatch, post, and postISR modified to handle the PIC16pointer implementations.* QPN_Vtables - this is the closest that I could come to the stockQPN framework.  The VTables are a public, global, structure andprovisions for the PIC16 pointer implementation were made.Startup Code============No specific start up code is required.***NOTE: The function assert_failed() typically should NOT use the stack,because stack might be corrupted by the time this function is called.Also, assert_failed() is intended to handle catastrophic errors andshould NOT return.  An assertion failure that is trapped turns on all the LED of the DM164130-9 board.***  